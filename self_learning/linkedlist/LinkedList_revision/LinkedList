
public class LinkedList {

    public static class Node{
        int data;
        Node next;

        public Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    public static Node tail;
    public static Node head;
    public static int size;

    public void addFirst(int data){
        Node newNode = new Node(data);
        if(head==null){
            head=tail=newNode;
            size++;
            return;
        }

        newNode.next=head;
        head=newNode;
        size++;
    }

    public void addLast(int data){
        Node newNode = new Node(data);
        if(tail==null){
            tail=head=newNode;
        }

        tail.next=newNode;
        tail=newNode;
        size++;
    }

    public void print(){
        if(head==null){
            System.out.println("LinkedList is empty !");
            return;
        }
        Node temp=head;
        while(temp!=null){
            System.out.print(temp.data+"->");
            temp=temp.next;
        }
        System.out.println("null");
    }

    public void addMiddle(int data,int index){
        if(index==0){
            addFirst(data);
            return;
        }
        Node temp = head;
        int i=0;
        Node newNode = new Node(data);
        while(i<index-1){
            temp=temp.next;
            i++;
        }
        newNode.next=temp.next;
        temp.next=newNode;
        size++;
    }

    public void removeFirst(){
        if(size==0){
            System.out.println("LinkedList is empty !");
            return;
        }else if(size==1){
            head=tail=null;
            return;
        }
        Node temp = head;
        head=temp.next;
        size--;
    }

    public void removeLast(){
        if(size==0){
            System.out.println("LinkedList is empty !");
            return;
        }else if(size==1){
            head=tail=null;
            size=0;
            return;
        }
        Node temp=head;
        int i=0;
        while(i<size-2){
            temp=temp.next;
            i++;
        }
        temp.next=null;
        tail=temp;
        size--;
    }

    public int searchIterative(int data){
        Node temp = head;
        int i=0;
        while(temp!=null){
            if(temp.data==data){
                return i;
            }
            temp=temp.next;
            i++;
        }

        return -1;
    }

    public int helper(int data,Node head){
        if(head==null){
            return -1;
        }
        if(head.data==data){
            return 0;
        }

        int index=helper(data,head.next);
        if(index==-1){
            return -1;
        }
        return index+1;

    }

    public int recursiveSearch(int data){
        return helper(data,head);
    }

    public void reverseLinkedList(){
        Node prev=null;
        Node curr=tail=head;
        Node next;
        while(curr!=null){
            next=curr.next;
            curr.next=prev;
            prev=curr;
            curr=next;
        }
        head=prev;
    }

    public void deleteFromNthNode(int n){
        int size=0;
        Node temp=head;
        while(temp!=null){
            size++;
            temp=temp.next;

        }
        if(n==size){
            head=head.next; // remove first
            return;
        }

        int delete=size-n;
        Node prev=head;
        int i=1;
        while(i<delete){
            i++;
            prev=prev.next;
        }
        prev.next=prev.next.next;
    }

    public Node findMid(Node head){
        Node slow=head;
        Node fast=head;
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }

    public boolean checkPalindrome(){

        if(head==null || head.next==null){
            return true;
        }

        // step 1 find mid(made function)
        Node midNode = findMid(head);
        //step 2 reverse 2nd half after mid
        Node prev=null;
        Node curr=midNode;
        Node next;
        while(curr!=null){
            next=curr.next;
            curr.next=prev;
            prev=curr;
            curr=next;
        }                                                 
        Node right = prev;//head of right half
        Node left=head;
        //step 3 check the value of node till any node become null
        while(right!=null){
            if(left.data!=right.data){
                return false;
            }
            left=left.next;
            right=right.next;
        }
        return true;

    }
    static void main(String[] args) {
        LinkedList ll = new LinkedList();
//        ll.addFirst(24);
//        ll.addFirst(76);
//        ll.addLast(6);
//
//        ll.addMiddle(4,2);
//
//
//        ll.print();
    //    System.out.println(ll.recursiveSearch(6));
    //    System.out.println(ll.size);
    //    ll.reverseLinkedList();
//        ll.deleteFromNthNode(4);
//        ll.print();

        ll.addFirst(1);
        ll.addFirst(2);
        ll.addFirst(2);
        ll.addFirst(1);
        ll.print();
        System.out.println(ll.checkPalindrome());
    }
}
